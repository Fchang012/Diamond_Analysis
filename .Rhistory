"Hospital.overall.rating.footnote",
"Mortality.national.comparison.footnote",
"Safety.of.care.national.comparison.footnote",
"Readmission.national.comparison.footnote",
"Patient.experience.national.comparison.footnote",
"Effectiveness.of.care.national.comparison.footnote",
"Timeliness.of.care.national.comparison.footnote",
"Efficient.use.of.medical.imaging.national.comparison.footnote")
HospitalDF <- HospitalDF[, !(names(HospitalDF) %in% drops)]
# #Debugging
# HospitalDF_Check <- HospitalDF_Check[, !(names(HospitalDF_Check) %in% drops)]
#Dynamic Variable Nameing
dynName <- function(theName, theData){
#Make dictionaries for the column
assign(paste(str_trim(theName),".dict", sep = ""), levels(theData), envir = .GlobalEnv)
#Convert to numeric
return(as.numeric(theData))
}
#Translate Back
translateBack <- function(theDict, theData){
return(as.factor(theDict[theData]))
}
#Turning Factors to Numerics
#  [2] "City"
# HospitalDF$City <- dynName("City", HospitalDF$City)
# #Debugging
# #Translate back
# HospitalDF$City <- translateBack(City.dict, HospitalDF$City)
#  [3] "State"
HospitalDF$State <- dynName("State", HospitalDF$State)
# #Debugging
# #Translate back
# HospitalDF$State <- translateBack(State.dict, HospitalDF$State)
#  [4] "ZIP.Code"
#  [5] "County.Name"
HospitalDF$County.Name <- dynName("County.Name", HospitalDF$County.Name)
# # #Debugging
# #Translate back
# HospitalDF$County.Name <- translateBack(County.Name.dict, HospitalDF$County.Name)
#  [6] "Hospital.Type"
# HospitalDF$Hospital.Type <- dynName("Hospital.Type", HospitalDF$Hospital.Type)
# #Debugging
# #Translate back
# HospitalDF$Hospital.Type <- translateBack(Hospital.Type.dict, HospitalDF$Hospital.Type)
#  [7] "Hospital.Ownership"
# HospitalDF$Hospital.Ownership <- dynName("Hospital.Ownership", HospitalDF$Hospital.Ownership)
# #Debugging
# #Translate back
# HospitalDF$Hospital.Ownership <- translateBack(Hospital.Ownership.dict, HospitalDF$Hospital.Ownership)
#  [8] "Emergency.Services"
HospitalDF$Emergency.Services <- dynName("Emergency.Services", HospitalDF$Emergency.Services)
# #Debugging
# #Translate back
# HospitalDF$Emergency.Services <- translateBack(Emergency.Services.dict, HospitalDF$Emergency.Services)
#  [9] "Meets.criteria.for.meaningful.use.of.EHRs"
# HospitalDF$Meets.criteria.for.meaningful.use.of.EHRs <- dynName("Meets.criteria.for.meaningful.use.of.EHRs", HospitalDF$Meets.criteria.for.meaningful.use.of.EHRs)
# #Debugging
# #Translate back
# HospitalDF$Meets.criteria.for.meaningful.use.of.EHRs <- translateBack(Meets.criteria.for.meaningful.use.of.EHRs.dict, HospitalDF$Meets.criteria.for.meaningful.use.of.EHRs)
# [10] "Hospital.overall.rating" <- Trying to predict
# [11] "Mortality.national.comparison"
#Remove Not Available
HospitalDF <- HospitalDF[!HospitalDF$Mortality.national.comparison ==  levels(HospitalDF$Mortality.national.comparison)[3],]
# HospitalDF$Mortality.national.comparison <- dynName("Mortality.national.comparison", HospitalDF$Mortality.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Mortality.national.comparison <- translateBack(Mortality.national.comparison.dict, HospitalDF$Mortality.national.comparison)
# [12] "Safety.of.care.national.comparison"
#Remove Not Available
HospitalDF <- HospitalDF[!HospitalDF$Safety.of.care.national.comparison == levels(HospitalDF$Safety.of.care.national.comparison)[3],]
# HospitalDF$Safety.of.care.national.comparison <- dynName("Safety.of.care.national.comparison", HospitalDF$Safety.of.care.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Safety.of.care.national.comparison <- translateBack(Safety.of.care.national.comparison.dict, HospitalDF$Safety.of.care.national.comparison)
# [13] "Readmission.national.comparison"
# HospitalDF$Readmission.national.comparison <- dynName("Readmission.national.comparison", HospitalDF$Readmission.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Readmission.national.comparison <- translateBack(Readmission.national.comparison.dict, HospitalDF$Readmission.national.comparison)
# [14] "Patient.experience.national.comparison"
#Remove Not Available
HospitalDF <- HospitalDF[!HospitalDF$Patient.experience.national.comparison == levels(HospitalDF$Patient.experience.national.comparison)[3],]
# HospitalDF$Patient.experience.national.comparison <- dynName("Patient.experience.national.comparison", HospitalDF$Patient.experience.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Patient.experience.national.comparison <- translateBack(Patient.experience.national.comparison.dict, HospitalDF$Patient.experience.national.comparison)
# [15] "Effectiveness.of.care.national.comparison"
#Remove Not Available
HospitalDF <- HospitalDF[!HospitalDF$Effectiveness.of.care.national.comparison == levels(HospitalDF$Effectiveness.of.care.national.comparison)[3],]
# HospitalDF$Effectiveness.of.care.national.comparison <- dynName("Effectiveness.of.care.national.comparison", HospitalDF$Effectiveness.of.care.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Effectiveness.of.care.national.comparison <- translateBack(Effectiveness.of.care.national.comparison.dict, HospitalDF$Effectiveness.of.care.national.comparison)
# [16] "Timeliness.of.care.national.comparison"
#Remove Not Available
HospitalDF <- HospitalDF[!HospitalDF$Timeliness.of.care.national.comparison == levels(HospitalDF$Timeliness.of.care.national.comparison)[3], ]
# HospitalDF$Timeliness.of.care.national.comparison <- dynName("Timeliness.of.care.national.comparison", HospitalDF$Timeliness.of.care.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Timeliness.of.care.national.comparison <- translateBack(Timeliness.of.care.national.comparison.dict, HospitalDF$Timeliness.of.care.national.comparison)
# [17] "Efficient.use.of.medical.imaging.national.comparison"
#Remove Not Available
HospitalDF <- HospitalDF[!HospitalDF$Efficient.use.of.medical.imaging.national.comparison == levels(HospitalDF$Efficient.use.of.medical.imaging.national.comparison)[3], ]
# HospitalDF$Efficient.use.of.medical.imaging.national.comparison <- dynName("Efficient.use.of.medical.imaging.national.comparison", HospitalDF$Efficient.use.of.medical.imaging.national.comparison)
# #Debugging
# #Translate back
# HospitalDF$Efficient.use.of.medical.imaging.national.comparison <- translateBack(Efficient.use.of.medical.imaging.national.comparison.dict, HospitalDF$Efficient.use.of.medical.imaging.national.comparison)
# # #Debugging Comparisons
# debugIndex <- sample(1:length(HospitalDF$Provider.ID), 5, replace=T)
# x <- HospitalDF[debugIndex,]
#
# y <- HospitalDF_Check[HospitalDF_Check$Provider.ID %in% x$Provider.ID, ]
HospitalDF <- HospitalDF[c(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 8)]
#Clean
HospitalDF <- droplevels(HospitalDF)
#Scale the data between 0-1
scl <- function(x){
(x - min(x)) / (max(x) - min(x))
}
HospitalDF$Median.Income <- scl(HospitalDF$Median.Income)
#75% for sample size
smp_size <- floor(0.75 * nrow(HospitalDF))
#Set the seed to make reproduceable
set.seed(123)
train_ind <- sample(seq_len(nrow(HospitalDF)), size = smp_size)
train <- HospitalDF[train_ind, ]
test <- HospitalDF[-train_ind, ]
#Set the seed to make reproduceable
set.seed(123)
#Get data
shuffle_Train <- HospitalDF[sample(nrow(HospitalDF)),]
shuffle_Train <- subset(shuffle_Train, select = -c(Provider.ID))
#10 qually size folds
folds <- cut(seq(1,nrow(shuffle_Train)), breaks=10, labels=FALSE)
kCrossSVM_RAD <- function(i, shuffle_Train, folds){
testIndexes <- which(folds == i, arr.ind = TRUE)
trainData <- shuffle_Train[-testIndexes, ]
testData <- shuffle_Train[testIndexes, ]
#Data Prep
train_SVM <- data.frame(predict(dummyVars("~ .", data=trainData[,2:15]), newdata = trainData[,2:15]))
test_SVM <- data.frame(predict(dummyVars("~ .", data=testData[,2:15]), newdata = testData[,2:15]))
#Change Hospital.overall.rating to Factor for this to classify
train_SVM[,"Hospital.overall.rating"] <- as.factor(train_SVM[,"Hospital.overall.rating"])
test_SVM[,"Hospital.overall.rating"] <- as.factor(test_SVM[,"Hospital.overall.rating"])
#Set up formula
n <- names(train_SVM)
f <- as.formula(paste("Hospital.overall.rating ~", paste(n[!n %in% "Hospital.overall.rating"], collapse = " + ")))
## SUPPORT VECTOR MACHINE MODEL
# Setup for cross validation
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
svm_Linear <- train(f, data = train_SVM, method = "svmRadial",
trControl=trctrl,
tuneLength = 10)
test_pred <- predict(svm_Linear, newdata = test_SVM)
CM <- table(test_pred, test_SVM$Hospital.overall.rating)
return(sum(diag(CM))/sum(CM))
}
# Calculate the number of cores
no_cores <- detectCores() - 1
cl<-makeCluster(no_cores)
clusterEvalQ(cl, library(caret))
registerDoParallel(cl)
#Parallel Processing
start <- proc.time()
kCrossValidation <- foreach(i=1:10, .combine = rbind) %dopar% kCrossSVM_RAD(i, shuffle_Train, folds)
validationTime <- proc.time() - start
stopImplicitCluster()
print(paste("Average Result Correct: ", mean(kCrossValidation)))
print("Time:", validationTime[3])
kCrossValidation
mean(kCrossValidation)
install.packages("Quandl")
library(Quandl)
vgt <- Quandl("VGT")
vgt <- Quandl("MSFT")
quantmod
library(quantmod)
getSymbols(c("VGT"))
View(VGT)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
JamesAllenTable <- as.tibble(JamesAllenTable)
warnings()
View(JamesAllenTable)
View(blueNileDataframe)
blueNileDataframe$Price <- as.double(blueNileDataframe$Price)
View(blueNileDataframe)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
blueNileDataframe$Price <- as.numeric(gsub('[$,]', '', blueNileDataframe$Price))
View(blueNileDataframe)
blueNileDataframe[1,]$urlList
JamesAllenTable$Price <- as.numeric(gsub('[$,]', '', JamesAllenTable$Price))
JamesAllenTable[1,]$`
Price
`
colnames(JamesAllenTable)
make.names(colnames(JamesAllenTable))
gsub('[.], '', colnames(JamesAllenTable))
)
colnames(JamesAllenTable)
make.name(colnames(JamesAllenTable))
make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable) <- make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable)
?gsub
test <- gsub('.', '', colnames(JamesAllenTable))
test
test <- gsub('.', '', colnames(JamesAllenTable), perl = T)
rwar
test
test <- gsub('.', '', colnames(JamesAllenTable))
colnames(JamesAllenTable)
test <- gsub('[.]', '', colnames(JamesAllenTable))
test
colnames(JamesAllenTable) <- gsub('[.]', '', colnames(JamesAllenTable))
View(JamesAllenTable)
View(JamesAllenTable)
colnames(JamesAllenTable) <- gsub('[X.]', '', colnames(JamesAllenTable))
View(JamesAllenTable)
?xmlToDataFrame
?readHTMLTable
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(blueNileDataframe)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(blueNileDataframe)
View(JamesAllenTable)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(JamesAllenTable)
getwd()
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(blueNileDataframe)
View(JamesAllenTable)
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(blueNileDataframe)
FinalDF <- cbind(blueNileDataframe$Carat, blueNileDataframe$Cut, blueNileDataframe$Color, blueNileDataframe$Clarity, blueNileDataframe$urlList)
View(FinalDF)
?subset
names(blueNileDataframe)
reqd <- as.vector(c("Carat", "Cut", "Color", "Clarity", "urlList"))
FinalDF <- blueNileDataframe[,reqd]
View(FinalDF)
unique(FinalDF$Cut)
FinalDF[FinalDF$Cut == "GoodGood",]
FinalDF[FinalDF$Cut == "GoodGood",]$Cut <- "Good"
FinalDF[FinalDF$Cut == "Very GoodVery Good",]$Cut <- "Very Good"
FinalDF[FinalDF$Cut == "Astor IdealAstor",]$Cut <- "Astor Ideal"
View(FinalDF)
colnames(JamesAllenTable)
tempJamesAllenDF <- JamesAllenTable[, reqd]
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(JamesAllenTable)
unique(JamesAllenTable$Lab)
View(tempJamesAllenDF)
FinalDF <- rbind(FinalDF, tempJamesAllenDF)
View(FinalDF)
unique(JamesAllenTable)
unique(colnames(JamesAllenTable))
colnames(blueNileDataframe)
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(FinalDF)
FinalDF$Carat <- as.numeric(FinalDF$Carat)
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
?write.table
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
View(FinalDF)
char(127)
asc(127)
as.raw(127)
as.raw(3)
as.raw(33)
as.character(as.raw(33))
strtoi(charToRaw(33),16L)
strtoi(charToRaw("!"),16L)
as.raw(33)
as.character(as.raw(33))
strtoi(as.raw(33))
strtoi(33)
rawToChar(33)
rawToChar(as.raw(33))
rawToChar(as.raw(127))
source('~/workspace/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
sep = rawToChar(as.raw(127))
rawToChar(as.raw(127))
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
View(FinalDF)
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
install.packages("ggplot2")
require(ggplot2)
colnames(FinalDF)
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point()
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
levels(FinalDF)
levels(FinalDF$Cut)
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point() +
guides(fill=FALSE)
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point() +
theme(legend.position = "none")
FinalDF[FinalDF$Cut == "Excellent",]$urlList
FinalDF[FinalDF$Cut == "Excellent",]
FinalDF[FinalDF$Cut == "Ideal",]
colNames(FinalDF)
unique(FinalDF$Cut)
levels(FinalDF$Cut)
FinalDF$Cut <- factor(FinalDF$Cut, levels(FinalDF$Cut)[c("Astor Ideal", "Excellent", "Ideal", "Very Good", "Good")])
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
factor(FinalDF$Cut, levels(FinalDF$Cut)["Astor Ideal", "Excellent", "Ideal", "Very Good", "Good"])
levels(FinalDF$Cut)
factor(FinalDF$Cut, levels(FinalDF$Cut)[c(1,2,4,5,3)])
FinalDF$Cut <- factor(FinalDF$Cut, levels(FinalDF$Cut)[c(1,2,4,5,3)])
levels(FinalDF$Cut)
levels(color)
levels(FinalDF$Color)
levels(FinalDF$Clarity)
FinalDF$Clarity <- factor(FinalDF$Clarity, levels(FinalDF$Clarity)[c(1,4,5,2,3)])
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
FinalDF[200,]
FinalDF[200,]$urlList
FinalDF[100,]$urlList
FinalDF[100,]
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point()
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point(aes(shape=Cut, color=Cut, size=Cut))
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point(aes(shape=Cut, color=Cut))
FinalDF[FinalDF$Cut == "Excellent"]
FinalDF[FinalDF$Cut == "Excellent",]
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Caret vs Price With Cut As Legend")
# Color
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Color)) +
geom_point(aes(shape=Color, color=Color)) +
ggtitle("Caret vs Price With Color As Legend")
# Clarity
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Clarity)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Caret vs Price With Clarity As Legend")
test <- FinalDF[FinalDF$Cut == "Ideal",]
View(test)
test <- FinalDF[FinalDF$Cut == "Very Good",]
View(test)
test <- FinalDF[FinalDF$Cut == "Astor Ideal",]
View(test)
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Clarity)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Caret vs Price With Clarity As Legend") +
theme_bw()
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Caret vs Price With Cut As Legend") +
theme_bw()
# Color
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Color)) +
geom_point(aes(shape=Color, color=Color)) +
ggtitle("Caret vs Price With Color As Legend") +
theme_bw()
# Clarity
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Clarity)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Caret vs Price With Clarity As Legend") +
theme_bw()
2^(2:5)
2^5
levels(FinalDF$Cut)
as.numeric(levels(FinalDF$Cut))
?model.matrix
levels(FinalDF$Cut)
model.matrix( ~ levels(FinalDF$Cut), data=FinalDF)
model.matrix( ~ Cut, data=FinalDF)
model.matrix( ~ Cut - 1, data=FinalDF)
tempDF <- cbind(model.matrix( ~ Cut - 1, data=FinalDF), model.matrix( ~ Color - 1, data=FinalDF), model.matrix( ~ Clarity - 1, data=FinalDF))
View(tempDF)
nrow
ncol
ncol(tempDF)
tempDF <- as.tibble(cbind(model.matrix( ~ Cut - 1, data=FinalDF), model.matrix( ~ Color - 1, data=FinalDF), model.matrix( ~ Clarity - 1, data=FinalDF)))
View(tempDF)
FinalDF <- as.tibble(FinalDF, tempDF)
FinalDF <- as.tibble(cbind(FinalDF, tempDF))
View(FinalDF)
colnames(FinalDF)
colnames(FinalDF)[,-c("Cut", "Color", "Clarity")]
colnames(FinalDF)[-c("Cut", "Color", "Clarity")]
typeof(colnames(FinalDF))
colnames(FinalDF)["Cut"]
colnames(FinalDF)[colnames(FinalDF)!=c("Cut")]
colnames(FinalDF)[colnames(FinalDF)!=c("Cut", "Color", "Clarity", "urlList")]
colnames(FinalDF)[colnames(FinalDF)!=c("Cut", "Color", "Clarity", "urlList")]
colnames(FinalDF)[,-c("Cut")]
colnames(FinalDF)[-c("Cut")]
colnames(FinalDF)[colnames(FinalDF) != c("Cut")]
colnames(FinalDF)[colnames(FinalDF) != c("Cut", "Clarity")]
colnames(FinalDF)[colnames(FinalDF) != c("Cut", "Clarity")]
colnames(FinalDF)[-3:5]
colnames(FinalDF)[,-3:5]
subset(colnames(FinalDF), select = c("Cut", "Color", "Clarity"))
colnames(FinalDF)
colnames(FinalDF)[c(1)]
colnames(FinalDF)[c(1:5)]
colnames(FinalDF)[-c(1:5)]
colnames(FinalDF)[-c(3:5)]
colnames(FinalDF)[-c(3:6)]
colnames(FinalDF)[-c(1,3:6)]
colnames(FinalDF)[-c(1:2,3:6)]
colnames(FinalDF)[-c(1:6)]
fString <- paste('log(Price) ~ log(Carat) +', paste(colnames(FinalDF)[-c(1:6)], collapse = '+'))
fString
fString <- paste('log(Price) ~ log(Carat)+', paste(colnames(FinalDF)[-c(1:6)], collapse = '+'), sep = '')
fString
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
fString
?lm
fit <- lm(fString, data=FinalDF)
summary(fit)
FinalDF[FinalDF$Color == "G"]
FinalDF[FinalDF$Color == "G",]
summary(fit)
alias(fit)
cor(fit)
cor(FinalDF)
summary(fit)
FinalDF[FinalDF$Clarity == "VS2",]
View(FinalDF)
?transform
test <- transform(FinalDF, sum=rowSums(FinalDF[,7:]))
test <- transform(FinalDF, sum=rowSums(FinalDF[,c(7:)]))
test <- transform(FinalDF, sum=rowSums(FinalDF[,c(7:-1)]))
FinalDF[,c(7:)]
FinalDF[,c(7:-1)]
FinalDF[,c(7:20)]
test <- transform(FinalDF, sum=rowSums(FinalDF[,c(7:20)]))
View(test)
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
summary(fit)
install.packages("corrplot")
require(corrplot)
test <- alias(fit)
test
?alias
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
corMatrixDF <- FinalDF[, c(1,7:20)]
View(corMatrixDF)
View(FinalDF)
corMatrixDF <- FinalDF[, c(1:2,7:20)]
View(corMatrixDF)
?log
corMatrixDF[,c(1:2)] <- log(corMatrixDF[,c(1:2)])
View(corMatrixDF)
corrplot(corMatrixDF, method = "circle")
corrplot(corMatrixDF)
View(corMatrixDF)
corrplot(as.matrix(corMatrixDF))
?corrplot
test <- as.matrix(corMatrixDF)
View(test)
corrplot(as.matrix(corMatrixDF), is.corr = FALSE)
corrplot(as.matrix(corMatrixDF), method = "number", is.corr = FALSE)
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
linDependTerm$Complete
colnames(FinalDF)
source('~/workspace/Fchang012/Diamond_Analysis/Diamond_Analysis.R')
summary(fit)
View(FinalDF)
predict(fit)
