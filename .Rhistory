ggtitle("Top 1% Color") +
theme_bw()
ggplot(focus,
aes(x=Carat,
y=Price,
color=Clarity)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Top 1% Clarity") +
theme_bw()
View(focus)
focus[focus$Cut >= "Ideal",]
focus[focus$Cut == "Ideal",]
focus[focus$Cut == "Ideal" && focus$Carat >=1,]
focus[focus$Carat >=1,]
focus[focus$Cut == "Ideal",]
library(dplyr)
focus %>% filter(1 <= carat, carat < 2, cut >= 'Ideal', color >= 'H', clarity >= 'VS1')
focus %>% filter(1 <= carat, Carat < 2, Cut >= 'Ideal', Color >= 'H', Clarity >= 'VS1')
focus %>% filter(1 <= Carat, Carat < 2, Cut >= 'Ideal', Color >= 'H', Clarity >= 'VS1')
focus %>% filter(1 <= Carat, Carat < 2)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
View(FinalDF)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
FinalDF <- read.csv("./Clean_Data/Diamond_Data.csv", sep = rawToChar(as.raw(127)))
levels(FinalDF)
levels(FinalDF$Cut )
FinalDF$Cut <- factor(FinalDF$Cut, levels(FinalDF$Cut)[c(1,5,2,4,6,3)])
levels(FinalDF$Cut )
levels(FinalDF$Clarity)
FinalDF$Clarity <- factor(FinalDF$Clarity, levels(FinalDF$Clarity)[c(1,6,7,4,5,2,3)])
levels(FinalDF$Clarity)
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Caret vs Price With Cut As Legend") +
theme_bw()
# Color
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Color)) +
geom_point(aes(shape=Color, color=Color)) +
ggtitle("Caret vs Price With Color As Legend") +
theme_bw()
# Clarity
ggplot(FinalDF,
aes(x=Carat,
y=Price,
color=Clarity)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Caret vs Price With Clarity As Legend") +
theme_bw()
# Cut
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Caret vs Price With Cut As Legend") +
theme_bw()
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Caret vs Price With Cut As Legend") +
theme_bw()
# Color
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Color, color=Color)) +
ggtitle("Caret vs Price With Color As Legend") +
theme_bw()
# Clarity
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Caret vs Price With Clarity As Legend") +
theme_bw()
View(FinalDF)
require(XML)
require(RCurl)
require(rlist)
require(rvest)
require(tibble)
# require(xml2)
# # General Diamond Criteria
# Shape: Princess
# Caret: 0.85 - 1.5
# Color: J - D
# Clarity: SI2- FL
# Depth: 73 - 76
# Table: 67 - 71
# Get cur dir from source of R Script
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# Blue Nile ---------------------------------------------------------------
BlueNileTable <- read_xml("./RAW/BlueNileTable.html", as_html = T)
BlueNileTable <- xmlTreeParse(BlueNileTable)[[1]]
top <- xmlRoot(BlueNileTable)
# headers
headers <- getNodeSet(top, '//div[@class="row"]')
headers <- getNodeSet(headers[[1]], '//div')
headers <- headers[-1]
headerList <- list()
for(i in 1:length(headers)){
headerList[i] <- xmlValue(headers[[i]])
}
# each records
eachRecord <- getNodeSet(top, '//a')
blueNileDataframe <- xmlToDataFrame(nodes = eachRecord, stringsAsFactors = FALSE)
urlList <- list()
for(i in 1:length(eachRecord)){
urlList[i] <- paste('https://www.bluenile.com', substring((xmlGetAttr(eachRecord[[i]], 'href')),2), sep = '')
}
urlList <- t(as.data.frame(urlList, stringsAsFactors = FALSE))
# Create df
names(blueNileDataframe) <- headerList
blueNileDataframe <- cbind(blueNileDataframe, urlList)
rownames(blueNileDataframe) <- NULL
blueNileDataframe <- as.tibble(blueNileDataframe)
# Fix price into a numeric
blueNileDataframe$Price <- as.numeric(gsub('[$,]', '', blueNileDataframe$Price))
# James Allen -------------------------------------------------------------
JamesAllenTable <- readHTMLTable("./RAW/JamesAllenWebTable.txt", stringsAsFactors = FALSE)
JamesAllenTable <- list.clean(JamesAllenTable, fun = is.null, recursive = FALSE)
JamesAllenTable <- as.tibble(JamesAllenTable$ResultsTable[,1:11])
# Getting the ids
JamesAllenIDs <- htmlTreeParse("./RAW/JamesAllenWebTable.txt")[[1]]
idList <- list()
JamesAllenIDs <- getNodeSet(JamesAllenIDs, '//tr[@data-item-id]')
for(i in 1:length(JamesAllenIDs)){
idList[i] <- paste('https://www.jamesallen.com/ese/?q=', xmlAttrs(JamesAllenIDs[[i]])[[5]], sep = '')
}
idList <- t(as.data.frame(idList, stringsAsFactors = FALSE))
rownames(idList) <- NULL
colnames(idList) <- "urlList"
JamesAllenTable <- cbind(JamesAllenTable, idList)
JamesAllenTable <- as.tibble(JamesAllenTable)
colnames(JamesAllenTable) <- make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable) <- gsub('[X.]', '', colnames(JamesAllenTable))
# Fix price as numeric
JamesAllenTable$Price <- as.numeric(gsub('[$,]', '', JamesAllenTable$Price))
# Combine And Write To CSV File -------------------------------------------
reqd <- as.vector(c("Price", "Carat", "Cut", "Color", "Clarity", "urlList"))
FinalDF <- blueNileDataframe[,reqd]
levels(FinalDF$Cut)
warnings
warnings()
View(blueNileDataframe)
View(JamesAllenTable)
require(XML)
require(RCurl)
require(rlist)
require(rvest)
require(tibble)
# require(xml2)
# # General Diamond Criteria
# Shape: Princess
# Caret: 0.85 - 1.5
# Color: J - D
# Clarity: SI2- FL
# Depth: 73 - 76
# Table: 67 - 71
# Get cur dir from source of R Script
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# Blue Nile ---------------------------------------------------------------
BlueNileTable <- read_xml("./RAW/BlueNileTable.html", as_html = T)
BlueNileTable <- xmlTreeParse(BlueNileTable)[[1]]
top <- xmlRoot(BlueNileTable)
# headers
headers <- getNodeSet(top, '//div[@class="row"]')
headers <- getNodeSet(headers[[1]], '//div')
headers <- headers[-1]
headerList <- list()
for(i in 1:length(headers)){
headerList[i] <- xmlValue(headers[[i]])
}
# each records
eachRecord <- getNodeSet(top, '//a')
blueNileDataframe <- xmlToDataFrame(nodes = eachRecord, stringsAsFactors = FALSE)
urlList <- list()
for(i in 1:length(eachRecord)){
urlList[i] <- paste('https://www.bluenile.com', substring((xmlGetAttr(eachRecord[[i]], 'href')),2), sep = '')
}
urlList <- t(as.data.frame(urlList, stringsAsFactors = FALSE))
# Create df
names(blueNileDataframe) <- headerList
blueNileDataframe <- cbind(blueNileDataframe, urlList)
rownames(blueNileDataframe) <- NULL
blueNileDataframe <- as.tibble(blueNileDataframe)
# Fix price into a numeric
blueNileDataframe$Price <- as.numeric(gsub('[$,]', '', blueNileDataframe$Price))
# James Allen -------------------------------------------------------------
JamesAllenTable <- readHTMLTable("./RAW/JamesAllenWebTable.txt", stringsAsFactors = FALSE)
JamesAllenTable <- list.clean(JamesAllenTable, fun = is.null, recursive = FALSE)
JamesAllenTable <- as.tibble(JamesAllenTable$ResultsTable[,1:11])
# Getting the ids
JamesAllenIDs <- htmlTreeParse("./RAW/JamesAllenWebTable.txt")[[1]]
idList <- list()
JamesAllenIDs <- getNodeSet(JamesAllenIDs, '//tr[@data-item-id]')
for(i in 1:length(JamesAllenIDs)){
idList[i] <- paste('https://www.jamesallen.com/ese/?q=', xmlAttrs(JamesAllenIDs[[i]])[[5]], sep = '')
}
idList <- t(as.data.frame(idList, stringsAsFactors = FALSE))
rownames(idList) <- NULL
colnames(idList) <- "urlList"
JamesAllenTable <- cbind(JamesAllenTable, idList)
JamesAllenTable <- as.tibble(JamesAllenTable)
colnames(JamesAllenTable) <- make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable) <- gsub('[X.]', '', colnames(JamesAllenTable))
# Fix price as numeric
JamesAllenTable$Price <- as.numeric(gsub('[$,]', '', JamesAllenTable$Price))
levels(blueNileDataframe$Cut)
unique(blueNileDataframe$Cut)
FinalDF[FinalDF$Cut == "GoodGood",]$Cut <- "Good"
FinalDF[FinalDF$Cut == "Very GoodVery Good",]$Cut <- "Very Good"
FinalDF[FinalDF$Cut == "Astor IdealAstor",]$Cut <- "Astor Ideal"
require(XML)
require(RCurl)
require(rlist)
require(rvest)
require(tibble)
# require(xml2)
# # General Diamond Criteria
# Shape: Princess
# Caret: 0.85 - 1.5
# Color: J - D
# Clarity: SI2- FL
# Depth: 73 - 76
# Table: 67 - 71
# Get cur dir from source of R Script
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# Blue Nile ---------------------------------------------------------------
BlueNileTable <- read_xml("./RAW/BlueNileTable.html", as_html = T)
BlueNileTable <- xmlTreeParse(BlueNileTable)[[1]]
top <- xmlRoot(BlueNileTable)
# headers
headers <- getNodeSet(top, '//div[@class="row"]')
headers <- getNodeSet(headers[[1]], '//div')
headers <- headers[-1]
headerList <- list()
for(i in 1:length(headers)){
headerList[i] <- xmlValue(headers[[i]])
}
# each records
eachRecord <- getNodeSet(top, '//a')
blueNileDataframe <- xmlToDataFrame(nodes = eachRecord, stringsAsFactors = FALSE)
urlList <- list()
for(i in 1:length(eachRecord)){
urlList[i] <- paste('https://www.bluenile.com', substring((xmlGetAttr(eachRecord[[i]], 'href')),2), sep = '')
}
urlList <- t(as.data.frame(urlList, stringsAsFactors = FALSE))
# Create df
names(blueNileDataframe) <- headerList
blueNileDataframe <- cbind(blueNileDataframe, urlList)
rownames(blueNileDataframe) <- NULL
blueNileDataframe <- as.tibble(blueNileDataframe)
# Fix price into a numeric
blueNileDataframe$Price <- as.numeric(gsub('[$,]', '', blueNileDataframe$Price))
# James Allen -------------------------------------------------------------
JamesAllenTable <- readHTMLTable("./RAW/JamesAllenWebTable.txt", stringsAsFactors = FALSE)
JamesAllenTable <- list.clean(JamesAllenTable, fun = is.null, recursive = FALSE)
JamesAllenTable <- as.tibble(JamesAllenTable$ResultsTable[,1:11])
# Getting the ids
JamesAllenIDs <- htmlTreeParse("./RAW/JamesAllenWebTable.txt")[[1]]
idList <- list()
JamesAllenIDs <- getNodeSet(JamesAllenIDs, '//tr[@data-item-id]')
for(i in 1:length(JamesAllenIDs)){
idList[i] <- paste('https://www.jamesallen.com/ese/?q=', xmlAttrs(JamesAllenIDs[[i]])[[5]], sep = '')
}
idList <- t(as.data.frame(idList, stringsAsFactors = FALSE))
rownames(idList) <- NULL
colnames(idList) <- "urlList"
JamesAllenTable <- cbind(JamesAllenTable, idList)
JamesAllenTable <- as.tibble(JamesAllenTable)
colnames(JamesAllenTable) <- make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable) <- gsub('[X.]', '', colnames(JamesAllenTable))
# Fix price as numeric
JamesAllenTable$Price <- as.numeric(gsub('[$,]', '', JamesAllenTable$Price))
# Combine And Write To CSV File -------------------------------------------
reqd <- as.vector(c("Price", "Carat", "Cut", "Color", "Clarity", "urlList"))
FinalDF <- blueNileDataframe[,reqd]
View(blueNileDataframe)
View(FinalDF)
View(blueNileDataframe)
View(JamesAllenTable)
require(XML)
require(RCurl)
require(rlist)
require(rvest)
require(tibble)
# require(xml2)
# # General Diamond Criteria
# Shape: Princess
# Caret: 0.85 - 1.5
# Color: J - D
# Clarity: SI2- FL
# Depth: 73 - 76
# Table: 67 - 71
# Get cur dir from source of R Script
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# Blue Nile ---------------------------------------------------------------
BlueNileTable <- read_xml("./RAW/BlueNileTable.html", as_html = T)
BlueNileTable <- xmlTreeParse(BlueNileTable)[[1]]
top <- xmlRoot(BlueNileTable)
# headers
headers <- getNodeSet(top, '//div[@class="row"]')
headers <- getNodeSet(headers[[1]], '//div')
headers <- headers[-1]
headerList <- list()
for(i in 1:length(headers)){
headerList[i] <- xmlValue(headers[[i]])
}
# each records
eachRecord <- getNodeSet(top, '//a')
blueNileDataframe <- xmlToDataFrame(nodes = eachRecord, stringsAsFactors = FALSE)
urlList <- list()
for(i in 1:length(eachRecord)){
urlList[i] <- paste('https://www.bluenile.com', substring((xmlGetAttr(eachRecord[[i]], 'href')),2), sep = '')
}
urlList <- t(as.data.frame(urlList, stringsAsFactors = FALSE))
# Create df
names(blueNileDataframe) <- headerList
blueNileDataframe <- cbind(blueNileDataframe, urlList)
rownames(blueNileDataframe) <- NULL
blueNileDataframe <- as.tibble(blueNileDataframe)
# Fix price into a numeric
blueNileDataframe$Price <- as.numeric(gsub('[$,]', '', blueNileDataframe$Price))
# James Allen -------------------------------------------------------------
JamesAllenTable <- readHTMLTable("./RAW/JamesAllenWebTable.txt", stringsAsFactors = FALSE)
JamesAllenTable <- list.clean(JamesAllenTable, fun = is.null, recursive = FALSE)
JamesAllenTable <- as.tibble(JamesAllenTable$ResultsTable[,1:11])
# Getting the ids
JamesAllenIDs <- htmlTreeParse("./RAW/JamesAllenWebTable.txt")[[1]]
idList <- list()
JamesAllenIDs <- getNodeSet(JamesAllenIDs, '//tr[@data-item-id]')
for(i in 1:length(JamesAllenIDs)){
idList[i] <- paste('https://www.jamesallen.com/ese/?q=', xmlAttrs(JamesAllenIDs[[i]])[[5]], sep = '')
}
idList <- t(as.data.frame(idList, stringsAsFactors = FALSE))
rownames(idList) <- NULL
colnames(idList) <- "urlList"
JamesAllenTable <- cbind(JamesAllenTable, idList)
JamesAllenTable <- as.tibble(JamesAllenTable)
colnames(JamesAllenTable) <- make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable) <- gsub('[X.]', '', colnames(JamesAllenTable))
# Fix price as numeric
JamesAllenTable$Price <- as.numeric(gsub('[$,]', '', JamesAllenTable$Price))
reqd <- as.vector(c("Price", "Carat", "Cut", "Color", "Clarity", "urlList"))
FinalDF <- blueNileDataframe[,reqd]
FinalDF[FinalDF$Cut == "GoodGood",]$Cut <- "Good"
FinalDF[FinalDF$Cut == "Very GoodVery Good",]$Cut <- "Very Good"
FinalDF[FinalDF$Cut == "Astor IdealAstor",]$Cut <- "Astor Ideal"
unique(JamesAllenTable$Cut)
tempJamesAllenDF <- JamesAllenTable[, reqd]
FinalDF <- rbind(FinalDF, tempJamesAllenDF)
FinalDF$Carat <- as.numeric(FinalDF$Carat)
write.table(FinalDF, "./Clean_Data/Diamond_Data.csv", sep = rawToChar(as.raw(127)))
View(FinalDF)
FinalDF <- read.csv("./Clean_Data/Diamond_Data.csv", sep = rawToChar(as.raw(127)))
View(FinalDF)
FinalDF$Cut <- factor(FinalDF$Cut, levels(FinalDF$Cut)[c(1,5,2,4,6,3)])
FinalDF$Clarity <- factor(FinalDF$Clarity, levels(FinalDF$Clarity)[c(1,6,7,4,5,2,3)])
levels(FinalDF$Clarity)
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Caret vs Price With Cut As Legend") +
theme_bw()
# Color
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Color, color=Color)) +
ggtitle("Caret vs Price With Color As Legend") +
theme_bw()
# Clarity
ggplot(FinalDF,
aes(x=Carat,
y=Price)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Caret vs Price With Clarity As Legend") +
theme_bw()
tempDF <- as.tibble(cbind(model.matrix( ~ Cut - 1, data=FinalDF), model.matrix( ~ Color - 1, data=FinalDF), model.matrix( ~ Clarity - 1, data=FinalDF)))
View(tempDF)
FinalDF <- as.tibble(cbind(FinalDF, tempDF))
colnames(FinalDF) <- make.names(colnames(FinalDF))
View(FinalDF)
colnames(FinalDF)
fString <- paste('log(Price) ~ log(Carat)+', paste(colnames(FinalDF)[-c(1:6, 12, 20, 27)], collapse = '+'), sep = '')
fit <- lm(fString, data=FinalDF)
linDependTerm <- alias(fit)
coeff=coefficients(fit)
ggplot(FinalDF, aes(x=Carat,
y=Price,
color=Cut)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
FinalDF <- cbind(FinalDF, Forecast=exp(predict(fit)))
FinalDF <- cbind(FinalDF, Residual=resid(fit))
View(FinalDF)
focus <- FinalDF[FinalDF$Residual <= quantile(FinalDF$Residual, 0.1), ]
ggplot(focus,
aes(x=Carat,
y=Price,
color=Cut)) +
geom_point(aes(shape=Cut, color=Cut)) +
ggtitle("Top 1% Cut") +
theme_bw()
ggplot(focus,
aes(x=Carat,
y=Price,
color=Color)) +
geom_point(aes(shape=Color, color=Color)) +
ggtitle("Top 1% Color") +
theme_bw()
ggplot(focus,
aes(x=Carat,
y=Price,
color=Clarity)) +
geom_point(aes(shape=Clarity, color=Clarity)) +
ggtitle("Top 1% Clarity") +
theme_bw()
View(tempDF)
View(focus)
View(focus)
write.table(focus, "./Output/focus.csv", sep = rawToChar(as.raw(127)))
colnames(focus)
write.table(focus[,c(1:6,28:29)], "./Output/focus.csv", sep = rawToChar(as.raw(127)))
write.table(focus[,c(1:6,28:29)], "./Output/focus.csv", sep = ";")
write.table(focus[,c(1:6,28:29)], "./Output/focus.csv", sep = ",")
write.table(focus[,c(1:6,28:29)], "./Output/focus.csv", sep = ",", row.names = NULL)
write.table(focus[,c(1:6,28:29)], "./Output/focus.csv", sep = ",", row.names = FALSE)
View(FinalDF)
require(XML)
require(RCurl)
require(rlist)
require(rvest)
require(tibble)
# require(xml2)
# # General Diamond Criteria
# Shape: Princess
# Caret: 0.85 - 1.5
# Color: J - D
# Clarity: SI2- FL
# Depth: 73 - 76
# Table: 67 - 71
# Get cur dir from source of R Script
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# Blue Nile ---------------------------------------------------------------
BlueNileTable <- read_xml("./RAW/BlueNileTable.html", as_html = T)
BlueNileTable <- xmlTreeParse(BlueNileTable)[[1]]
top <- xmlRoot(BlueNileTable)
# headers
headers <- getNodeSet(top, '//div[@class="row"]')
headers <- getNodeSet(headers[[1]], '//div')
headers <- headers[-1]
headerList <- list()
for(i in 1:length(headers)){
headerList[i] <- xmlValue(headers[[i]])
}
# each records
eachRecord <- getNodeSet(top, '//a')
blueNileDataframe <- xmlToDataFrame(nodes = eachRecord, stringsAsFactors = FALSE)
urlList <- list()
for(i in 1:length(eachRecord)){
urlList[i] <- paste('https://www.bluenile.com', substring((xmlGetAttr(eachRecord[[i]], 'href')),2), sep = '')
}
urlList <- t(as.data.frame(urlList, stringsAsFactors = FALSE))
# Create df
names(blueNileDataframe) <- headerList
blueNileDataframe <- cbind(blueNileDataframe, urlList)
rownames(blueNileDataframe) <- NULL
blueNileDataframe <- as.tibble(blueNileDataframe)
# Fix price into a numeric
blueNileDataframe$Price <- as.numeric(gsub('[$,]', '', blueNileDataframe$Price))
# James Allen -------------------------------------------------------------
JamesAllenTable <- readHTMLTable("./RAW/JamesAllenWebTable.txt", stringsAsFactors = FALSE)
JamesAllenTable <- list.clean(JamesAllenTable, fun = is.null, recursive = FALSE)
JamesAllenTable <- as.tibble(JamesAllenTable$ResultsTable[,1:11])
# Getting the ids
JamesAllenIDs <- htmlTreeParse("./RAW/JamesAllenWebTable.txt")[[1]]
idList <- list()
JamesAllenIDs <- getNodeSet(JamesAllenIDs, '//tr[@data-item-id]')
for(i in 1:length(JamesAllenIDs)){
idList[i] <- paste('https://www.jamesallen.com/ese/?q=', xmlAttrs(JamesAllenIDs[[i]])[[5]], sep = '')
}
idList <- t(as.data.frame(idList, stringsAsFactors = FALSE))
rownames(idList) <- NULL
colnames(idList) <- "urlList"
JamesAllenTable <- cbind(JamesAllenTable, idList)
JamesAllenTable <- as.tibble(JamesAllenTable)
colnames(JamesAllenTable) <- make.names(colnames(JamesAllenTable))
colnames(JamesAllenTable) <- gsub('[X.]', '', colnames(JamesAllenTable))
# Fix price as numeric
JamesAllenTable$Price <- as.numeric(gsub('[$,]', '', JamesAllenTable$Price))
View(JamesAllenTable)
View(blueNileDataframe)
unique(JamesAllenTable$Lab)
JamesAllenTable <- JamesAllenTable[JamesAllenTable$Lab != "IGI",]
source('E:/Shared_Files/Fchang012/Diamond_Analysis/HTML_Table_Parse.R', echo=TRUE)
source('E:/Shared_Files/Fchang012/Diamond_Analysis/Diamond_Analysis.R', echo=TRUE)
